import streamlit as st
import pandas as pd
import geopandas as gpd
import folium
from folium.plugins import HeatMap, TimestampedGeoJson
from streamlit_folium import st_folium
from datetime import timedelta
import requests
from io import BytesIO
import os

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏–∑ —Å—É–¥–æ–≤ –∏ –Ω–µ—Ñ—Ç—è–Ω—ã—Ö –ø—è—Ç–µ–Ω")
st.title("üõ∞Ô∏è –ê–Ω–∞–ª–∏–∑ —Å—É–¥–æ–≤ –∏ –Ω–µ—Ñ—Ç—è–Ω—ã—Ö –ø—è—Ç–µ–Ω üõ¢Ô∏è")
st.markdown("""
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ—Ñ—Ç—è–Ω—ã—Ö –ø—è—Ç–Ω–∞—Ö –∏ —Å—É–¥–∞—Ö, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É –Ω–∏–º–∏,
–∏ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã —Å—É–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—è—Ç–Ω–∞.
""")

# --- 2. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data(ttl=86400)  # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 24 —á–∞—Å–∞
def load_spills_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ—Ñ—Ç—è–Ω—ã—Ö –ø—è—Ç–Ω–∞—Ö"""
    url = "https://raw.githubusercontent.com/your-account/oil-spills-data/main/fields2.geojson"
    try:
        response = requests.get(url)
        response.raise_for_status()
        gdf = gpd.read_file(BytesIO(response.content))
        st.success("–î–∞–Ω–Ω—ã–µ –æ –Ω–µ—Ñ—Ç—è–Ω—ã—Ö –ø—è—Ç–Ω–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return gdf
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—è—Ç–Ω–∞—Ö: {str(e)}")
        return gpd.GeoDataFrame()

@st.cache_data(ttl=3600)
def load_ais_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö AIS (–ø—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–º–µ–Ω–∏—Ç–µ URL –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    url = "https://marine-api.example.com/ais_data.csv"
    try:
        response = requests.get(url)
        response.raise_for_status()
        df = pd.read_csv(BytesIO(response.content))
        st.success("–î–∞–Ω–Ω—ã–µ AIS —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö AIS: {str(e)}")
        return pd.DataFrame()

# --- 3. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def preprocess_data(spills_gdf, ais_df):
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—è—Ç–µ–Ω
    spills_gdf = spills_gdf.rename(columns={'slick_name': 'spill_id', 'area_sys': 'area_sq_km'})
    
    if 'date' in spills_gdf.columns and 'time' in spills_gdf.columns:
        spills_gdf['detection_date'] = pd.to_datetime(
            spills_gdf['date'] + ' ' + spills_gdf['time'], 
            errors='coerce'
        )
    else:
        spills_gdf['detection_date'] = pd.to_datetime(
            spills_gdf['spill_id'], 
            format='%Y-%m-%d_%H:%M:%S', 
            errors='coerce'
        )
    
    spills_gdf = spills_gdf.dropna(subset=['detection_date'])
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö AIS
    ais_gdf = gpd.GeoDataFrame(
        ais_df,
        geometry=gpd.points_from_xy(ais_df.longitude, ais_df.latitude),
        crs="EPSG:4326"
    )
    ais_gdf['timestamp'] = pd.to_datetime(ais_gdf['BaseDateTime'], errors='coerce')
    ais_gdf = ais_gdf.dropna(subset=['timestamp'])
    
    return spills_gdf, ais_gdf

def find_ship_spill_connections(spills_gdf, ais_gdf, time_window_hours):
    """–ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å—É–¥–∞–º–∏ –∏ –Ω–µ—Ñ—Ç—è–Ω—ã–º–∏ –ø—è—Ç–Ω–∞–º–∏"""
    connections = []
    time_delta = timedelta(hours=time_window_hours)
    
    for _, spill in spills_gdf.iterrows():
        spill_geom = spill.geometry
        spill_time = spill.detection_date
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—É–¥–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
        vessels_in_window = ais_gdf[
            (ais_gdf['timestamp'] >= spill_time - time_delta) &
            (ais_gdf['timestamp'] <= spill_time)
        ]
        
        # –ü–æ–∏—Å–∫ —Å—É–¥–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ –ø—è—Ç–Ω–∞
        vessels_in_spill = vessels_in_window[vessels_in_window.geometry.within(spill_geom)]
        
        for _, vessel in vessels_in_spill.iterrows():
            connections.append({
                'spill_id': spill.spill_id,
                'detection_date': spill.detection_date,
                'area_sq_km': spill.area_sq_km,
                'mmsi': vessel.mmsi,
                'vessel_name': vessel.get('vessel_name', 'N/A'),
                'vessel_type': vessel.get('vessel_type', 'N/A'),
                'timestamp': vessel.timestamp,
                'time_to_detection': (spill.detection_date - vessel.timestamp).total_seconds() / 3600
            })
    
    return pd.DataFrame(connections)

# --- 4. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ---
def create_base_map(default_location=[60.0, 70.0], default_zoom=5):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–∞—Ä—Ç—ã"""
    return folium.Map(
        location=default_location,
        zoom_start=default_zoom,
        tiles='CartoDB positron',
        control_scale=True
    )

def plot_spills(spills_gdf, map_object):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Ñ—Ç—è–Ω—ã—Ö –ø—è—Ç–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É"""
    spills_layer = folium.FeatureGroup(name='–ù–µ—Ñ—Ç—è–Ω—ã–µ –ø—è—Ç–Ω–∞', show=True)
    
    for _, row in spills_gdf.iterrows():
        spill_popup = folium.Popup(
            f"<b>ID:</b> {row.spill_id}<br>"
            f"<b>–î–∞—Ç–∞:</b> {row.detection_date.strftime('%Y-%m-%d %H:%M')}<br>"
            f"<b>–ü–ª–æ—â–∞–¥—å:</b> {row.area_sq_km:.2f} –∫–º¬≤",
            max_width=300
        )
        
        folium.GeoJson(
            row.geometry,
            style_function=lambda x: {
                'fillColor': '#ff0000',
                'color': '#ff0000',
                'weight': 1,
                'fillOpacity': 0.4
            },
            popup=spill_popup
        ).add_to(spills_layer)
    
    spills_layer.add_to(map_object)
    return map_object

def plot_ship_routes(connections_df, ais_gdf, map_object):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å—É–¥–æ–≤"""
    if connections_df.empty:
        return map_object
    
    routes_layer = folium.FeatureGroup(name='–ú–∞—Ä—à—Ä—É—Ç—ã —Å—É–¥–æ–≤', show=True)
    
    for mmsi in connections_df['mmsi'].unique():
        ship_data = ais_gdf[ais_gdf['mmsi'] == mmsi].sort_values('timestamp')
        ship_name = ship_data.iloc[0].get('vessel_name', f'–°—É–¥–Ω–æ {mmsi}')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
        route_points = []
        for _, point in ship_data.iterrows():
            route_points.append([point.geometry.y, point.geometry.x])
        
        if len(route_points) > 1:
            folium.PolyLine(
                locations=route_points,
                color='#1f77b4',
                weight=3,
                opacity=0.7,
                popup=f"–ú–∞—Ä—à—Ä—É—Ç: {ship_name} (MMSI: {mmsi})"
            ).add_to(routes_layer)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        for _, point in ship_data.iterrows():
            folium.CircleMarker(
                location=[point.geometry.y, point.geometry.x],
                radius=4,
                color='#1f77b4',
                fill=True,
                fill_color='#1f77b4',
                popup=f"{ship_name}<br>–í—Ä–µ–º—è: {point.timestamp.strftime('%Y-%m-%d %H:%M')}"
            ).add_to(routes_layer)
    
    routes_layer.add_to(map_object)
    return map_object

def plot_connections(connections_df, map_object):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —Å—É–¥–Ω–æ-–ø—è—Ç–Ω–æ –Ω–∞ –∫–∞—Ä—Ç—É"""
    if connections_df.empty:
        return map_object
    
    connections_layer = folium.FeatureGroup(name='–°–≤—è–∑–∏ —Å—É–¥–Ω–æ-–ø—è—Ç–Ω–æ', show=True)
    
    for _, row in connections_df.iterrows():
        spill_center = spills_gdf[spills_gdf['spill_id'] == row.spill_id].geometry.iloc[0].centroid
        vessel_point = ais_gdf[
            (ais_gdf['mmsi'] == row.mmsi) & 
            (ais_gdf['timestamp'] == row.timestamp)
        ].geometry.iloc[0]
        
        folium.PolyLine(
            locations=[
                [vessel_point.y, vessel_point.x],
                [spill_center.y, spill_center.x]
            ],
            color='#ff9900',
            weight=2,
            dash_array='5, 10',
            popup=f"–°—É–¥–Ω–æ: {row.vessel_name} (MMSI: {row.mmsi})<br>–ü—è—Ç–Ω–æ: {row.spill_id}"
        ).add_to(connections_layer)
        
        folium.Marker(
            location=[spill_center.y, spill_center.x],
            icon=folium.Icon(color='red', icon='tint', prefix='fa'),
            popup=f"–ü—è—Ç–Ω–æ: {row.spill_id}"
        ).add_to(connections_layer)
        
        folium.Marker(
            location=[vessel_point.y, vessel_point.x],
            icon=folium.Icon(color='blue', icon='ship', prefix='fa'),
            popup=f"–°—É–¥–Ω–æ: {row.vessel_name}<br>–í—Ä–µ–º—è: {row.timestamp.strftime('%Y-%m-%d %H:%M')}"
        ).add_to(connections_layer)
    
    connections_layer.add_to(map_object)
    return map_object

# --- 5. –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
time_window_hours = st.sidebar.slider(
    "–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞ (—á–∞—Å—ã –¥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è):",
    min_value=1, max_value=72, value=24, step=1
)

analysis_type = st.sidebar.radio(
    "–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
    ["–í—Å–µ —Å—É–¥–∞", "–¢–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ"]
)

st.sidebar.markdown("---")
st.sidebar.info("""
**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
spills_gdf = load_spills_data()
ais_df = load_ais_data()

if spills_gdf.empty or ais_df.empty:
    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
    st.stop()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
    spills_gdf, ais_gdf = preprocess_data(spills_gdf, ais_df)
    connections_df = find_ship_spill_connections(spills_gdf, ais_gdf, time_window_hours)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
col1, col2, col3 = st.columns(3)
col1.metric("–ù–µ—Ñ—Ç—è–Ω—ã—Ö –ø—è—Ç–µ–Ω", len(spills_gdf))
col2.metric("–ó–∞–ø–∏—Å–µ–π AIS", len(ais_gdf))
col3.metric("–ù–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π", len(connections_df))

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
st.subheader("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –Ω–µ—Ñ—Ç—è–Ω—ã—Ö –ø—è—Ç–µ–Ω –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å—É–¥–æ–≤")

if not spills_gdf.empty:
    map_center = [spills_gdf.geometry.centroid.y.mean(), spills_gdf.geometry.centroid.x.mean()]
else:
    map_center = [60.0, 70.0]  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

m = create_base_map(default_location=map_center, default_zoom=6)
m = plot_spills(spills_gdf, m)

if analysis_type == "–í—Å–µ —Å—É–¥–∞":
    m = plot_ship_routes(ais_gdf, ais_gdf, m)
else:
    if not connections_df.empty:
        m = plot_ship_routes(connections_df, ais_gdf, m)
        m = plot_connections(connections_df, m)

folium.LayerControl().add_to(m)
st_folium(m, width=1200, height=600)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

if not connections_df.empty:
    st.write("### –°—É–¥—å—è —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–≤—è–∑—å—é —Å –Ω–µ—Ñ—Ç—è–Ω—ã–º–∏ –ø—è—Ç–Ω–∞–º–∏")
    connections_display = connections_df[[
        'mmsi', 'vessel_name', 'vessel_type', 'spill_id', 
        'timestamp', 'detection_date', 'time_to_detection', 'area_sq_km'
    ]]
    
    connections_display = connections_display.rename(columns={
        'mmsi': 'MMSI',
        'vessel_name': '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞',
        'vessel_type': '–¢–∏–ø —Å—É–¥–Ω–∞',
        'spill_id': 'ID –ø—è—Ç–Ω–∞',
        'timestamp': '–í—Ä–µ–º—è —Å—É–¥–Ω–∞',
        'detection_date': '–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è',
        'time_to_detection': '–í—Ä–µ–º—è –¥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (—á)',
        'area_sq_km': '–ü–ª–æ—â–∞–¥—å (–∫–º¬≤)'
    })
    
    st.dataframe(connections_display.sort_values('–í—Ä–µ–º—è –¥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (—á)'))

    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å—É–¥–∞–º
    st.write("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—É–¥–∞–º")
    ship_stats = connections_df.groupby(['mmsi', 'vessel_name']).agg(
        spill_count=('spill_id', 'nunique'),
        total_area=('area_sq_km', 'sum'),
        avg_time_to_detection=('time_to_detection', 'mean')
    ).reset_index().sort_values('spill_count', ascending=False)
    
    ship_stats = ship_stats.rename(columns={
        'mmsi': 'MMSI',
        'vessel_name': '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞',
        'spill_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—è—Ç–µ–Ω',
        'total_area': '–°—É–º–º–∞—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–∫–º¬≤)',
        'avg_time_to_detection': '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (—á)'
    })
    
    st.dataframe(ship_stats)
else:
    st.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å—É–¥–∞–º–∏ –∏ –Ω–µ—Ñ—Ç—è–Ω—ã–º–∏ –ø—è—Ç–Ω–∞–º–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
with st.expander("üìÅ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
    tab1, tab2 = st.tabs(["–î–∞–Ω–Ω—ã–µ –æ –Ω–µ—Ñ—Ç—è–Ω—ã—Ö –ø—è—Ç–Ω–∞—Ö", "–î–∞–Ω–Ω—ã–µ AIS"])
    
    with tab1:
        st.write(spills_gdf.drop(columns=['geometry']))
    
    with tab2:
        st.write(ais_gdf.drop(columns=['geometry']).head(1000))

st.markdown("---")
st.caption("¬© 2023 –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ—Ñ—Ç—è–Ω—ã—Ö —Ä–∞–∑–ª–∏–≤–æ–≤ | –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
